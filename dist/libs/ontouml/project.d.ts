import { ClassStereotype, OntologicalNature, PropertyStereotype, RelationStereotype, Class, Generalization, GeneralizationSet, Literal, ModelElement, ModelElementContainer, Package, Property, Relation, OntoumlElement, OntoumlType, Diagram, Classifier } from '.';
export declare class Project extends OntoumlElement implements ModelElementContainer {
    model: Package;
    diagrams: Diagram[];
    constructor(base?: Partial<Project>);
    createModel(base?: Partial<Package>): Package;
    setModel(pkg: Package): void;
    createDiagram(base?: Partial<Diagram>): Diagram;
    addDiagram(diagram: Diagram): void;
    addDiagrams(diagrams: Diagram[]): void;
    setDiagrams(diagrams: Diagram[]): void;
    getContents(): OntoumlElement[];
    getElementById(id: String): OntoumlElement;
    getClassById(id: String): Class;
    getRelationById(id: String): Relation;
    getPropertyById(id: String): Property;
    getGeneralizationById(id: String): Generalization;
    getGeneralizationSetById(id: String): GeneralizationSet;
    getPackageById(id: String): Package;
    getAllAttributes(): Property[];
    getAllProperties(): Property[];
    getAllRelationEnds(): Property[];
    getAllRelations(): Relation[];
    getAllGeneralizations(): Generalization[];
    getGeneralizationsBetween(classifiers: Classifier<any, any>[]): Generalization[];
    getAllGeneralizationSets(): GeneralizationSet[];
    getGeneralizationSetsInvolvingAny(generalizations: Generalization[]): GeneralizationSet[];
    getGeneralizationSetsInvolvingAll(generalizations: Generalization[]): GeneralizationSet[];
    getAllPackages(): Package[];
    getAllClasses(): Class[];
    getAllEnumerations(): Class[];
    getAllLiterals(): Literal[];
    getAllModelElements(): ModelElement[];
    getAllContentsByType(type: OntoumlType | OntoumlType[]): OntoumlElement[];
    getAllAttributesByStereotype(stereotype: PropertyStereotype | PropertyStereotype[]): Property[];
    getAllClassesByStereotype(stereotype: ClassStereotype | ClassStereotype[]): Class[];
    getAllRelationsByStereotype(stereotype: RelationStereotype | RelationStereotype[]): Relation[];
    getAllClassesWithRestrictedToContainedIn(nature: OntologicalNature | OntologicalNature[]): Class[];
    getClassesWithTypeStereotype(): Class[];
    getClassesWithHistoricalRoleStereotype(): Class[];
    getClassesWithHistoricalRoleMixinStereotype(): Class[];
    getClassesWithEventStereotype(): Class[];
    getClassesWithSituationStereotype(): Class[];
    getClassesWithCategoryStereotype(): Class[];
    getClassesWithMixinStereotype(): Class[];
    getClassesWithRoleMixinStereotype(): Class[];
    getClassesWithPhaseMixinStereotype(): Class[];
    getClassesWithKindStereotype(): Class[];
    getClassesWithCollectiveStereotype(): Class[];
    getClassesWithQuantityStereotype(): Class[];
    getClassesWithRelatorStereotype(): Class[];
    getClassesWithQualityStereotype(): Class[];
    getClassesWithModeStereotype(): Class[];
    getClassesWithSubkindStereotype(): Class[];
    getClassesWithRoleStereotype(): Class[];
    getClassesWithPhaseStereotype(): Class[];
    getClassesWithEnumerationStereotype(): Class[];
    getClassesWithDatatypeStereotype(): Class[];
    getClassesWithAbstractStereotype(): Class[];
    getClassesRestrictedToFunctionalComplex(): Class[];
    getClassesRestrictedToCollective(): Class[];
    getClassesRestrictedToQuantity(): Class[];
    getClassesRestrictedToMode(): Class[];
    getClassesRestrictedToIntrinsicMode(): Class[];
    getClassesRestrictedToExtrinsicMode(): Class[];
    getClassesRestrictedToQuality(): Class[];
    getClassesRestrictedToRelator(): Class[];
    lock(): void;
    unlock(): void;
    getClassesByNature(): Class[];
    toJSON(): any;
    resolveReferences(_elementReferenceMap: Map<string, OntoumlElement>): void;
}
