import { OntoumlElement, Class, Classifier, ClassStereotype, RelationStereotype, ModelElement, Property } from '..';
export declare class Relation extends Classifier<Relation, RelationStereotype> {
    constructor(base?: Partial<Relation>);
    getContents(): OntoumlElement[];
    getAllowedStereotypes(): RelationStereotype[];
    isStereotypeValid(allowsNone?: boolean): boolean;
    toJSON(): any;
    createSourceEnd(base?: Partial<Property>): Property;
    createTargetEnd(base?: Partial<Property>): Property;
    createMemberEnd(position?: number, base?: Partial<Property>): Property;
    getSourceEnd(): Property;
    getTargetEnd(): Property;
    getMemberEnd(position: number): Property;
    getSourceClassEnd(): Property;
    getTargetClassEnd(): Property;
    getDerivingRelationEnd(): Property;
    getDerivedClassEnd(): Property;
    getMemberClassEnd(position: number): Property;
    getSource(): Classifier<any, any>;
    getTarget(): Classifier<any, any>;
    getMembers(): Classifier<any, any>[];
    getMember(position: number): Classifier<any, any>;
    getSourceClass(): Class;
    getTargetClass(): Class;
    getMemberClass(position: number): Class;
    getDerivingRelation(): Relation;
    getDerivedClass(): Class;
    getSourceStereotype(): ClassStereotype;
    getTargetStereotype(): ClassStereotype;
    getSourceClassStereotype(): ClassStereotype;
    getTargetClassStereotype(): ClassStereotype;
    getMemberClassStereotype(position: number): ClassStereotype;
    getDerivingRelationStereotype(): RelationStereotype;
    getDerivedClassStereotype(): ClassStereotype;
    isBinary(): boolean;
    isTernary(): boolean;
    isBinaryClassRelation(): boolean;
    isDerivation(): boolean;
    isTernaryClassRelation(): boolean;
    isPartWholeRelation(): boolean;
    isMediation(): boolean;
    isExistentialDependency(): boolean;
    isSourceExistentiallyDependent(): boolean;
    isTargetExistentiallyDependent(): boolean;
    isBinaryExistentialDependency(): boolean;
    hasExistentialDependencyStereotype(): boolean;
    hasMaterialStereotype(): boolean;
    hasDerivationStereotype(): boolean;
    hasComparativeStereotype(): boolean;
    hasMediationStereotype(): boolean;
    hasCharacterizationStereotype(): boolean;
    hasExternalDependenceStereotype(): boolean;
    hasComponentOfStereotype(): boolean;
    hasMemberOfStereotype(): boolean;
    hasSubCollectionOfStereotype(): boolean;
    hasSubQuantityOfStereotype(): boolean;
    hasInstantiationStereotype(): boolean;
    hasTerminationStereotype(): boolean;
    hasParticipationalStereotype(): boolean;
    hasParticipationStereotype(): boolean;
    hasHistoricalDependenceStereotype(): boolean;
    hasCreationStereotype(): boolean;
    hasManifestationStereotype(): boolean;
    hasBringsAboutStereotype(): boolean;
    hasTriggersStereotype(): boolean;
    holdsBetween(...conditions: ((relationEnd: Property) => boolean)[]): boolean;
    holdsBetweenEvents(): boolean;
    holdsBetweenMoments(): boolean;
    holdsBetweenSubstantials(): boolean;
    clone(): Relation;
    replace(originalElement: ModelElement, newElement: ModelElement): void;
    getMediatedClass(): Class;
    getMediatedEnd(): Property;
    getRelatorClass(): Class;
    getRelatorEnd(): Property;
    getBearerClass(): Class;
    getBearerEnd(): Property;
    getInheringClass(): Class;
    getInheringEnd(): Property;
    getPartClass(): Class;
    getPartEnd(): Property;
    getWholeClass(): Class;
    getWholeEnd(): Property;
    getDependedClass(): Class;
    getDependedEnd(): Property;
    getDependentClass(): Class;
    getDependentEnd(): Property;
    getTypeClass(): Class;
    getTypeEnd(): Property;
    getInstanceClass(): Class;
    getInstanceEnd(): Property;
    getEventClass(): Class;
    getEventEnd(): Property;
    getEndurantClass(): Class;
    getEndurantEnd(): Property;
    getSituationClass(): Class;
    getSituationEnd(): Property;
}
