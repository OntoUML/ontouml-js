import { Node } from '../../ontouml2db/graph/Node';
import { NodeProperty } from '../../ontouml2db/graph/NodeProperty';
import { Filter } from '../../ontouml2db/tracker/Filter';
import { TracedNode } from './TracedNode';
export declare class Tracer {
    private sourceNode;
    private filters;
    private targetNodes;
    constructor(newNode: Node);
    getTargetNodes(): Map<string, TracedNode>;
    addTargetNode(newNode: Node): void;
    addJoinedNode(tracedNode: Node, joinedNode: Node, innerJoin: boolean): void;
    existsTraceFor(node: Node): boolean;
    isNodeTraced(node: Node): boolean;
    removeTrace(node: Node): boolean;
    getSourceNode(): Node;
    setSourceNode(node: Node): void;
    newFilter(sourceNode: Node, property: NodeProperty, value: any, propertyBelongsToOtherNode: Node): void;
    addFilter(filter: Filter): void;
    existsFilter(newFilter: Filter): boolean;
    getFilters(): Filter[];
    updateSourceRulesToFrom(fromNode: Node, toNode: Node): void;
    isNodeToApplyFilter(node: Node): boolean;
    addJoinedNodeToDoFilter(nodoFilter: Node, joinedNode: Node): void;
    changeFieldToFilter(oldProperty: NodeProperty, newProperty: NodeProperty): void;
    isFiltredByProperty(property: NodeProperty): boolean;
    removeNodeToApplyFilter(node: Node): void;
    existsTracerByName(sourceNodeName: string, targetNodeName: string): boolean;
    toString(): string;
}
