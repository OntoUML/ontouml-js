import { PropertyContainerInterface } from '../../ontouml2db/graph/PropertyContainerInterface';
import { AssociationContainerInterface } from '../../ontouml2db/graph/AssociationContainerInterface';
import { NodeProperty } from '../../ontouml2db/graph/NodeProperty';
import { GraphGeneralization } from '../../ontouml2db/graph/GraphGeneralization';
import { GraphGeneralizationSet } from '../../ontouml2db/graph/GraphGeneralizationSet';
import { GraphRelation } from '../../ontouml2db/graph/GraphRelation';
import { GraphAssociation } from '../../ontouml2db/graph/GraphAssociation';
import { ClassStereotype } from '../../ontouml';
export declare class Node implements PropertyContainerInterface, AssociationContainerInterface {
    private id;
    private name;
    private stereotype;
    private resolved;
    private propertyContainer;
    private associationContainer;
    private associationNameNtoN;
    constructor(id: string, name: string, stereotype: ClassStereotype);
    getId(): string;
    setName(name: string): void;
    getName(): string;
    setStereotype(stereotype: ClassStereotype): void;
    getStereotype(): ClassStereotype;
    setPropertyContainer(container: PropertyContainerInterface): void;
    setResolved(flag: boolean): void;
    isResolved(): boolean;
    setAssociationNameNtoN(name: string): void;
    getAssociationNameNtoN(): string;
    clone(): Node;
    addProperty(property: NodeProperty): void;
    addProperties(properties: NodeProperty[]): void;
    addPropertyAt(index: number, property: NodeProperty): void;
    addPropertiesAt(index: number, properties: NodeProperty[]): void;
    getPropertyByID(id: string): NodeProperty;
    getPropertyByName(name: string): NodeProperty;
    getProperties(): NodeProperty[];
    clonePropertyContainer(): PropertyContainerInterface;
    removeProperty(id: string): void;
    getPrimaryKey(): NodeProperty;
    getPKName(): string;
    existsPropertyName(propertyName: string): boolean;
    existsProperty(property: NodeProperty): boolean;
    getFKRelatedOfNodeID(id: string): NodeProperty;
    addGeneralization(generalization: GraphGeneralization): void;
    getGeneralizations(): GraphGeneralization[];
    getGeneralizationSets(): GraphGeneralizationSet[];
    addRelation(relation: GraphRelation): void;
    getRelations(): GraphRelation[];
    getAssociationWithNode(nodeID: string): GraphAssociation;
    isSpecialization(): boolean;
    hasSpecialization(): boolean;
    deleteAssociation(association: GraphAssociation): void;
    toString(): string;
}
